#!/usr/bin/env python3
"""
GIFT ZONA Betting Platform - –ù–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –º–æ–Ω–æ–ª–∏—Ç–Ω–æ–≥–æ main.py –≤ –º–æ–¥—É–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
"""

import os
import asyncio
import signal
import logging
from contextlib import asynccontextmanager

from fastapi import FastAPI, Request, WebSocket, WebSocketDisconnect
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –º–æ–¥–µ–ª–∏
from config.settings import settings
from models.database import db_manager

# –°–µ—Ä–≤–∏—Å—ã
from services.gift_service import gift_service
from services.betting_service import betting_service

# API —Ä–æ—É—Ç–µ—Ä—ã
from api.deposits import router as deposits_router
from api.betting import router as betting_router

# –£—Ç–∏–ª–∏—Ç—ã
from utils.telegram import validate_telegram_init_data

# Telegram –∫–ª–∏–µ–Ω—Ç (–∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ main.py)
from pyrogram import Client, filters
import json
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, settings.LOG_LEVEL),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

# –û—Ç–∫–ª—é—á–∞–µ–º –ª–∏—à–Ω–∏–µ –ª–æ–≥–∏ Pyrogram
logging.getLogger("pyrogram").setLevel(logging.WARNING)
logging.getLogger("pyrogram.session.session").setLevel(logging.ERROR)
logging.getLogger("pyrogram.connection.connection").setLevel(logging.ERROR)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
telegram_client = None
telegram_client_available = False
shutdown_requested = False

def signal_handler(signum, frame):
    """Graceful shutdown handler"""
    global shutdown_requested
    print(f"[SIGNAL] –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç—Å—è graceful shutdown...")
    shutdown_requested = True

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
signal.signal(signal.SIGTERM, signal_handler)
signal.signal(signal.SIGINT, signal_handler)

@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print(f"[STARTUP] üöÄ –ó–∞–ø—É—Å–∫ {settings.APP_NAME} v{settings.VERSION}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if not settings.validate():
        raise Exception("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    print("[STARTUP] üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    await db_manager.initialize()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∫–ª–∏–µ–Ω—Ç–∞
    print("[STARTUP] üì± –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∫–ª–∏–µ–Ω—Ç–∞...")
    await init_telegram_client()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
    print("[STARTUP] üõ†Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤...")
    gift_service.telegram_client = telegram_client
    
    print(f"[STARTUP] ‚úÖ {settings.APP_NAME} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    
    yield  # –ó–¥–µ—Å—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    
    # Shutdown
    print("[SHUTDOWN] üõë Graceful shutdown...")
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –∫–ª–∏–µ–Ω—Ç–∞
    if telegram_client and telegram_client.is_connected:
        try:
            await telegram_client.stop()
            print("[SHUTDOWN] ‚úÖ Telegram –∫–ª–∏–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            print(f"[SHUTDOWN] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Telegram: {e}")
    
    # –ó–∞–∫—Ä—ã—Ç–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await db_manager.close()
    print("[SHUTDOWN] ‚úÖ Shutdown –∑–∞–≤–µ—Ä—à–µ–Ω")

async def init_telegram_client():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∫–ª–∏–µ–Ω—Ç–∞"""
    global telegram_client, telegram_client_available
    
    try:
        if not settings.PYROGRAM_SESSION_STRING:
            print("[TELEGRAM] ‚ö†Ô∏è PYROGRAM_SESSION_STRING –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        telegram_client = Client(
            name=f"gift_zona_{int(time.time())}",
            api_id=settings.API_ID,
            api_hash=settings.API_HASH,
            session_string=settings.PYROGRAM_SESSION_STRING,
            workdir="/tmp",
            no_updates=False,
            takeout=False,
            sleep_threshold=60,
            workers=1,
            max_concurrent_transmissions=1
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        await telegram_client.start()
        telegram_client_available = True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        me = await telegram_client.get_me()
        print(f"[TELEGRAM] ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫: {me.first_name} (@{me.username}, ID: {me.id})")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        await setup_telegram_handlers()
        
    except Exception as e:
        print(f"[TELEGRAM] ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        telegram_client_available = False

async def setup_telegram_handlers():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Telegram —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    @telegram_client.on_message(filters.all)
    async def handle_gift_deposit(client, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –ø–æ–¥–∞—Ä–∫–æ–≤"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–æ–¥–∞—Ä–æ–∫
            if (hasattr(message, 'service') and 
                message.service and 
                str(message.service) == "MessageServiceType.GIFT" and
                hasattr(message, 'gift') and 
                message.gift):
                
                print(f"[TELEGRAM] üéÅ –û–±–Ω–∞—Ä—É–∂–µ–Ω –¥–µ–ø–æ–∑–∏—Ç –ø–æ–¥–∞—Ä–∫–∞!")
                
                # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∞
                gift_data = json.loads(str(message.gift))
                sender_id = message.from_user.id if message.from_user else None
                
                if sender_id:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
                    result = await gift_service.process_deposit(
                        gift_data, sender_id, message.id
                    )
                    
                    if result["success"]:
                        print(f"[TELEGRAM] ‚úÖ –î–µ–ø–æ–∑–∏—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {result['message']}")
                    else:
                        print(f"[TELEGRAM] ‚ùå –û—à–∏–±–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–∞: {result['error']}")
                
        except Exception as e:
            print(f"[TELEGRAM] ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    print("[TELEGRAM] ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title=settings.APP_NAME,
    version=settings.VERSION,
    description="–ë–µ—Ç—Ç–∏–Ω–≥ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Å –ø–æ–¥–∞—Ä–∫–∞–º–∏ Telegram",
    lifespan=lifespan
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.ALLOWED_ORIGINS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤
app.include_router(deposits_router)
app.include_router(betting_router)

# –ë–∞–∑–æ–≤—ã–µ endpoints
@app.get("/")
async def root():
    """–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞"""
    return {
        "status": f"{settings.APP_NAME} is running!",
        "version": settings.VERSION,
        "telegram_available": telegram_client_available,
        "telegram_connected": telegram_client_available and telegram_client and telegram_client.is_connected
    }

@app.get("/health")
async def health_check():
    """Health check –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    return {
        "status": "healthy",
        "timestamp": time.time(),
        "services": {
            "database": db_manager.pool is not None,
            "telegram": telegram_client_available
        }
    }

@app.post("/api/auth/telegram")
async def authenticate_telegram(request: Request):
    """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram WebApp"""
    try:
        body = await request.json()
        init_data = body.get("initData")
        
        if not init_data:
            return JSONResponse(
                status_code=400,
                content={"success": False, "error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç initData"}
            )
        
        user_data = validate_telegram_init_data(init_data)
        
        if not user_data:
            return JSONResponse(
                status_code=401,
                content={"success": False, "error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Telegram"}
            )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = user_data.get('id')
        if user_id:
            from models.database import execute_single
            
            await execute_single("""
                INSERT INTO user_profiles (
                    user_id, first_name, last_name, username, 
                    photo_url, is_premium
                )
                VALUES ($1, $2, $3, $4, $5, $6)
                ON CONFLICT (user_id) DO UPDATE SET
                    first_name = EXCLUDED.first_name,
                    last_name = EXCLUDED.last_name,
                    username = EXCLUDED.username,
                    photo_url = EXCLUDED.photo_url,
                    is_premium = EXCLUDED.is_premium,
                    updated_at = NOW()
            """, 
                user_id, 
                user_data.get('first_name'),
                user_data.get('last_name'),
                user_data.get('username'),
                user_data.get('photo_url'),
                user_data.get('is_premium', False)
            )
        
        return {
            "success": True,
            "user": user_data,
            "message": "–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞"
        }
        
    except Exception as e:
        print(f"[AUTH] ‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
        return JSONResponse(
            status_code=500,
            content={"success": False, "error": "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}
        )

# WebSocket endpoint (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    """WebSocket –¥–ª—è —Ä–µ–∞–ª-—Ç–∞–π–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
    await websocket.accept()
    
    try:
        while True:
            # –ü—Ä–æ—Å—Ç–æ–π ping-pong
            data = await websocket.receive_json()
            
            if data.get("type") == "ping":
                await websocket.send_json({"type": "pong", "timestamp": time.time()})
            
    except WebSocketDisconnect:
        print("[WS] –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è")
    except Exception as e:
        print(f"[WS] –û—à–∏–±–∫–∞ WebSocket: {e}")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=int(os.getenv("PORT", "4000")),
        reload=settings.DEBUG
    )

