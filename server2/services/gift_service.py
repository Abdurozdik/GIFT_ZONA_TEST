#!/usr/bin/env python3
"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–∞—Ä–∫–∞–º–∏
–î–µ–ø–æ–∑–∏—Ç—ã, –≤—ã–≤–æ–¥—ã, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º
–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ main.py –∏ withdrawal_service.py
"""

import json
import asyncio
from typing import Dict, List, Optional, Any
from datetime import datetime
from models.database import db_manager, execute_query, execute_single, execute_insert
from utils.telegram import send_telegram_message

class GiftService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–∞—Ä–∫–∞–º–∏ Telegram"""
    
    def __init__(self, telegram_client=None):
        self.telegram_client = telegram_client
    
    async def process_deposit(self, gift_data: Dict, sender_id: int, message_id: int) -> Dict:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–∞ –ø–æ–¥–∞—Ä–∫–∞
        –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ main.py —Å—Ç—Ä–æ–∫–∏ 620-640
        """
        try:
            gift_slug = gift_data.get("name", "")
            gift_title = gift_data.get("title", "")
            gift_num = gift_data.get("collectible_id", 0)
            transfer_price = gift_data.get("transfer_price", 0)
            
            print(f"[GIFT] üíé –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–∞:")
            print(f"[GIFT] - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {sender_id}")
            print(f"[GIFT] - –ü–æ–¥–∞—Ä–æ–∫: {gift_title} ({gift_slug})")
            print(f"[GIFT] - –°—Ç–æ–∏–º–æ—Å—Ç—å: {transfer_price} –∑–≤–µ–∑–¥")
            
            if not sender_id or not gift_slug or transfer_price <= 0:
                return {
                    "success": False,
                    "error": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞"
                }
            
            async with db_manager.pool.acquire() as conn:
                async with conn.transaction():
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏ –ø–æ message_id
                    existing = await conn.fetchrow(
                        "SELECT id FROM deposits WHERE message_id = $1",
                        message_id
                    )
                    
                    if existing:
                        print(f"[GIFT] ‚ö†Ô∏è –î—É–±–ª—å –¥–µ–ø–æ–∑–∏—Ç–∞, message_id: {message_id}")
                        return {
                            "success": False,
                            "error": "–î–µ–ø–æ–∑–∏—Ç —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω"
                        }
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–ø–æ–∑–∏—Ç
                    deposit_row = await conn.fetchrow("""
                        INSERT INTO deposits (telegram_user_id, title, slug, num, message_id)
                        VALUES ($1, $2, $3, $4, $5)
                        RETURNING id
                    """, sender_id, gift_title, gift_slug, transfer_price, message_id)
                    
                    deposit_id = deposit_row['id']
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                    await conn.execute("""
                        INSERT INTO transactions (
                            user_id, type, gift_title, gift_slug, gift_value, 
                            stars_paid, status, telegram_message_id, notes
                        )
                        VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
                    """, 
                        sender_id, 'deposit', gift_title, gift_slug, transfer_price,
                        transfer_price, 'completed', message_id, 
                        f'–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–ø–æ–∑–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {sender_id}'
                    )
                    
                    print(f"[GIFT] ‚úÖ –î–µ–ø–æ–∑–∏—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ID {deposit_id}")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                    if self.telegram_client:
                        try:
                            await send_telegram_message(
                                self.telegram_client, 
                                sender_id,
                                f"‚úÖ –ü–æ–¥–∞—Ä–æ–∫ '{gift_title}' —É—Å–ø–µ—à–Ω–æ –∑–∞—á–∏—Å–ª–µ–Ω! "
                                f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {transfer_price} ‚≠ê"
                            )
                        except Exception as e:
                            print(f"[GIFT] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: {e}")
                    
                    return {
                        "success": True,
                        "deposit_id": deposit_id,
                        "message": f"–î–µ–ø–æ–∑–∏—Ç {gift_title} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω"
                    }
                    
        except Exception as e:
            print(f"[GIFT] ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–∞: {e}")
            return {
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"
            }
    
    async def get_user_deposits(self, user_id: int) -> List[Dict]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ main.py —Å—Ç—Ä–æ–∫–∏ 680-684
        """
        try:
            deposits = await execute_query("""
                SELECT id, title, slug, num, created_at, 
                       true as can_withdraw
                FROM deposits 
                WHERE telegram_user_id = $1 
                ORDER BY created_at DESC
            """, user_id)
            
            return deposits
            
        except Exception as e:
            print(f"[GIFT] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤: {e}")
            return []
    
    async def get_user_balance(self, user_id: int) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–≤–µ–∑–¥–∞—Ö"""
        try:
            # –û–±—â–∏–π –±–∞–ª–∞–Ω—Å –∏–∑ –¥–µ–ø–æ–∑–∏—Ç–æ–≤
            total_deposited = await execute_single("""
                SELECT COALESCE(SUM(num), 0) as total
                FROM deposits 
                WHERE telegram_user_id = $1
            """, user_id)
            
            # –ü–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ (—Å—Ç–∞–≤–∫–∏)
            total_spent = await execute_single("""
                SELECT COALESCE(SUM(total_value), 0) as total
                FROM bets 
                WHERE user_id = $1 AND status != 'cancelled'
            """, user_id)
            
            # –í—ã–∏–≥—Ä—ã—à–∏
            total_won = await execute_single("""
                SELECT COALESCE(SUM(actual_payout), 0) as total
                FROM bets 
                WHERE user_id = $1 AND status = 'won'
            """, user_id)
            
            deposited = total_deposited['total'] if total_deposited else 0
            spent = total_spent['total'] if total_spent else 0
            won = total_won['total'] if total_won else 0
            
            available_balance = deposited - spent + won
            
            return {
                "total_deposited": deposited,
                "total_spent": spent,
                "total_won": won,
                "available_balance": max(0, available_balance)
            }
            
        except Exception as e:
            print(f"[GIFT] ‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –±–∞–ª–∞–Ω—Å–∞: {e}")
            return {
                "total_deposited": 0,
                "total_spent": 0,
                "total_won": 0,
                "available_balance": 0
            }
    
    async def process_withdrawal(self, deposit_id: int, recipient_user_id: int, owner_user_id: int) -> Dict:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–∞ –ø–æ–¥–∞—Ä–∫–∞
        –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ withdrawal_service.py
        """
        try:
            async with db_manager.pool.acquire() as conn:
                async with conn.transaction():
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ–ø–æ–∑–∏—Ç–µ
                    deposit = await conn.fetchrow(
                        "SELECT * FROM deposits WHERE id = $1", 
                        deposit_id
                    )
                    
                    if not deposit:
                        return {
                            "success": False,
                            "error": "–î–µ–ø–æ–∑–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
                        }
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –≤—ã–≤–æ–¥
                    if deposit['telegram_user_id'] != owner_user_id:
                        return {
                            "success": False,
                            "error": "–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–≤–æ–¥ —ç—Ç–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞"
                        }
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ –≤—ã–≤–µ–¥–µ–Ω
                    existing_withdrawal = await conn.fetchrow("""
                        SELECT id FROM transactions 
                        WHERE telegram_message_id = $1 AND type = 'withdrawal' 
                        AND status = 'completed'
                        LIMIT 1
                    """, deposit['message_id'])
                    
                    if existing_withdrawal:
                        return {
                            "success": False,
                            "error": "–ü–æ–¥–∞—Ä–æ–∫ —É–∂–µ –±—ã–ª –≤—ã–≤–µ–¥–µ–Ω"
                        }
                    
                    # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤—ã–≤–æ–¥–∞
                    await conn.execute("""
                        INSERT INTO transactions (
                            user_id, type, gift_title, gift_slug, gift_value,
                            recipient_user_id, status, telegram_message_id, notes
                        )
                        VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
                    """,
                        owner_user_id, 'withdrawal', deposit['title'], 
                        deposit['slug'], deposit['num'], recipient_user_id,
                        'pending', deposit['message_id'],
                        f'–í—ã–≤–æ–¥ –ø–æ–¥–∞—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_user_id}'
                    )
                    
                    # TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥–∞—Ä–∫–∞
                    # –ü–æ–∫–∞ —á—Ç–æ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
                    await conn.execute("""
                        UPDATE transactions 
                        SET status = 'completed', notes = notes || ' [SIMULATED]'
                        WHERE telegram_message_id = $1 AND type = 'withdrawal'
                    """, deposit['message_id'])
                    
                    print(f"[GIFT] ‚úÖ –í—ã–≤–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {deposit['title']} -> {recipient_user_id}")
                    
                    return {
                        "success": True,
                        "message": f"–ü–æ–¥–∞—Ä–æ–∫ '{deposit['title']}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_user_id}"
                    }
                    
        except Exception as e:
            print(f"[GIFT] ‚ùå –û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞: {e}")
            return {
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"
            }
    
    async def get_withdrawal_history(self, user_id: int) -> List[Dict]:
        """–ò—Å—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            history = await execute_query("""
                SELECT * FROM transactions 
                WHERE user_id = $1 AND type = 'withdrawal' 
                ORDER BY created_at DESC
            """, user_id)
            
            return history
            
        except Exception as e:
            print(f"[GIFT] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            return []

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
gift_service = GiftService()

