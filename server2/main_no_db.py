#!/usr/bin/env python3
"""
GIFT ZONA Betting Platform - Simplified version without database
–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–ø–ª–æ—è –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""

import os
import asyncio
import signal
import logging
from contextlib import asynccontextmanager

from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
shutdown_requested = False

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
    global shutdown_requested
    logger.info(f"[SIGNAL] –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∏–Ω–∏—Ü–∏–∏—Ä—É—é shutdown...")
    shutdown_requested = True

signal.signal(signal.SIGTERM, signal_handler)
signal.signal(signal.SIGINT, signal_handler)

@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ GIFT ZONA (–±–µ–∑ –ë–î)")
    
    yield  # –ó–¥–µ—Å—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    
    logger.info("üõë Graceful shutdown...")

# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="GIFT ZONA API",
    description="–ë–µ—Ç—Ç–∏–Ω–≥ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Å –ø–æ–¥–∞—Ä–∫–∞–º–∏ Telegram (—Ç–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è)",
    version="2.0.0-test",
    lifespan=lifespan
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ë–∞–∑–æ–≤—ã–µ endpoints
@app.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ API"""
    return {
        "message": "üéØ GIFT ZONA API —Ä–∞–±–æ—Ç–∞–µ—Ç!",
        "version": "2.0.0-test",
        "status": "healthy",
        "database": "disabled"
    }

@app.get("/health")
async def health_check():
    """Health check –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    return {
        "status": "healthy",
        "timestamp": asyncio.get_event_loop().time(),
        "database": "disabled"
    }

@app.get("/api/status")
async def api_status():
    """–°—Ç–∞—Ç—É—Å API"""
    return {
        "api": "online",
        "telegram": "disabled",
        "database": "disabled",
        "version": "2.0.0-test"
    }

# Telegram auth endpoint (–∑–∞–≥–ª—É—à–∫–∞)
@app.post("/api/auth/telegram")
async def telegram_auth(request: Request):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    try:
        body = await request.json()
        return {
            "success": True,
            "message": "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏",
            "user": {
                "id": 12345,
                "first_name": "Test User",
                "username": "testuser"
            }
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return {"success": False, "error": "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"}

# Deposits endpoint (–∑–∞–≥–ª—É—à–∫–∞)
@app.get("/api/deposits/{user_id}")
async def get_user_deposits(user_id: int):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤"""
    return {
        "deposits": [],
        "total_balance": 0,
        "message": "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∞"
    }

# Events endpoint (–∑–∞–≥–ª—É—à–∫–∞)
@app.get("/api/betting/events")
async def get_events():
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–±—ã—Ç–∏–π"""
    return {
        "events": [],
        "message": "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∞"
    }

if __name__ == "__main__":
    import uvicorn
    port = int(os.getenv("PORT", "8000"))
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    
    uvicorn.run(
        "main_no_db:app",
        host="0.0.0.0",
        port=port,
        reload=False
    ) 