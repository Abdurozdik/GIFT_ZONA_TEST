import React, { createContext, useContext, useEffect, useState, useRef, useCallback } from 'react';
import UnifiedWebSocketClient from './websocketGateway';

// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ WebSocket
const WebSocketContext = createContext(null);

// Provider –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è WebSocket
export const WebSocketProvider = ({ children, apiUrl }) => {
  const [connectionStatus, setConnectionStatus] = useState('disconnected');
  const [gameStates, setGameStates] = useState({});
  const [activeChannels, setActiveChannels] = useState(new Set());
  const gatewayRef = useRef(null);
  const handlersRef = useRef({});

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
  useEffect(() => {
    console.log('[WEBSOCKET_CONTEXT] üöÄ Initializing global WebSocket connection...');
    
    // –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π gateway
    gatewayRef.current = new UnifiedWebSocketClient(apiUrl);
    
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    const handleConnection = (data) => {
      console.log('[WEBSOCKET_CONTEXT] üîå Connection status:', data.status);
      setConnectionStatus(data.status);
    };
    
    gatewayRef.current.on('connection', handleConnection);
    handlersRef.current.connection = handleConnection;
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —Å—Ä–∞–∑—É –∫ —Å–∏—Å—Ç–µ–º–Ω—ã–º –∫–∞–Ω–∞–ª–∞–º
    gatewayRef.current.connect();
    
    return () => {
      console.log('[WEBSOCKET_CONTEXT] üßπ Cleaning up global WebSocket...');
      if (gatewayRef.current) {
        // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π
        Object.entries(handlersRef.current).forEach(([event, handler]) => {
          gatewayRef.current.off(event, handler);
        });
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        gatewayRef.current.close();
      }
    };
  }, [apiUrl]);

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
  const subscribe = useCallback((channel) => {
    if (!gatewayRef.current || !channel) return;
    
    console.log(`[WEBSOCKET_CONTEXT] üì∫ Subscribing to channel: ${channel}`);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ
    setActiveChannels(prev => new Set([...prev, channel]));
    
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    gatewayRef.current.subscribe(channel);
    
    // –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    const stateHandler = (data) => {
      console.log(`[WEBSOCKET_CONTEXT] üì® Received ${channel} state:`, data);
      setGameStates(prev => ({
        ...prev,
        [channel]: data
      }));
    };
    
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    gatewayRef.current.on(`${channel}_state`, stateHandler);
    handlersRef.current[`${channel}_state`] = stateHandler;
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø–∏—Å–∫–∏
    return () => unsubscribe(channel);
  }, []); // ‚úÖ –ü–£–°–¢–´–ï –ó–ê–í–ò–°–ò–ú–û–°–¢–ò!

  // –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç –∫–∞–Ω–∞–ª–∞
  const unsubscribe = useCallback((channel) => {
    if (!gatewayRef.current || !channel) return;
    
    console.log(`[WEBSOCKET_CONTEXT] üì∫ Unsubscribing from channel: ${channel}`);
    
    // –£–±–∏—Ä–∞–µ–º –∫–∞–Ω–∞–ª –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
    setActiveChannels(prev => {
      const newSet = new Set(prev);
      newSet.delete(channel);
      return newSet;
    });
    
    // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    gatewayRef.current.unsubscribe(channel);
    
    // –£–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    const stateHandler = handlersRef.current[`${channel}_state`];
    if (stateHandler) {
      gatewayRef.current.off(`${channel}_state`, stateHandler);
      delete handlersRef.current[`${channel}_state`];
    }
    
    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
    setGameStates(prev => {
      const newStates = { ...prev };
      delete newStates[channel];
      return newStates;
    });
  }, []); // ‚úÖ –ü–£–°–¢–´–ï –ó–ê–í–ò–°–ò–ú–û–°–¢–ò!

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
  const on = useCallback((event, handler) => {
    if (!gatewayRef.current) return;
    gatewayRef.current.on(event, handler);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø–∏—Å–∫–∏
    return () => {
      if (gatewayRef.current) {
        gatewayRef.current.off(event, handler);
      }
    };
  }, []); // ‚úÖ –ü–£–°–¢–´–ï –ó–ê–í–ò–°–ò–ú–û–°–¢–ò!

  // –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç —Å–æ–±—ã—Ç–∏—è
  const off = useCallback((event, handler) => {
    if (!gatewayRef.current) return;
    gatewayRef.current.off(event, handler);
  }, []); // ‚úÖ –ü–£–°–¢–´–ï –ó–ê–í–ò–°–ò–ú–û–°–¢–ò!

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  const getConnectionStatus = () => {
    return gatewayRef.current ? gatewayRef.current.getConnectionStatus() : 'disconnected';
  };

  const contextValue = {
    // –°–æ—Å—Ç–æ—è–Ω–∏—è
    connectionStatus,
    gameStates,
    activeChannels: Array.from(activeChannels),
    
    // –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏
    subscribe,
    unsubscribe,
    
    // –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è–º–∏
    on,
    off,
    
    // –£—Ç–∏–ª–∏—Ç—ã
    getConnectionStatus,
    gateway: gatewayRef.current
  };

  return (
    <WebSocketContext.Provider value={contextValue}>
      {children}
    </WebSocketContext.Provider>
  );
};

// –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è WebSocket –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
export const useWebSocket = () => {
  const context = useContext(WebSocketContext);
  
  if (!context) {
    throw new Error('useWebSocket must be used within a WebSocketProvider');
  }
  
  return context;
};

// –•—É–∫ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–∞–Ω–∞–ª
export const useGameChannel = (channel) => {
  const { subscribe, unsubscribe, gameStates, connectionStatus } = useWebSocket();
  
  useEffect(() => {
    if (!channel) return;
    
    console.log(`[USE_GAME_CHANNEL] üì∫ Setting up channel: ${channel}`);
    const unsubscribeFn = subscribe(channel);
    
    return () => {
      console.log(`[USE_GAME_CHANNEL] üßπ Cleaning up channel: ${channel}`);
      if (unsubscribeFn) {
        unsubscribeFn();
      }
    };
  }, [channel]); // ‚úÖ –¢–û–õ–¨–ö–û CHANNEL –í –ó–ê–í–ò–°–ò–ú–û–°–¢–Ø–•!
  
  return {
    gameState: gameStates[channel] || null,
    connectionStatus,
    isConnected: connectionStatus === 'connected'
  };
};

export default WebSocketContext; 