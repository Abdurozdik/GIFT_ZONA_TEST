import React, { useEffect, useState } from "react";
import MainPage from "./pages/MainPage.jsx";
import EventsPage from "./pages/EventsPage";  
import ProfilePage from "./pages/ProfilePage";
import LoadingSpinner from "./components/LoadingSpinner";
import { WebSocketProvider } from "./services/websocket";
import apiService from "./services/api";

/**
 * –ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–µ—Ç—Ç–∏–Ω–≥ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
 * –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–æ—É—Ç–∏–Ω–≥ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
 */
function App() {
  const [tgUser, setTgUser] = useState(null);
  const [currentView, setCurrentView] = useState('loading');
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    initializeTelegramApp();
  }, []);

  const initializeTelegramApp = async () => {
    try {
      console.log('[APP] Starting initialization...');
      console.log('[APP] window.Telegram:', window.Telegram);
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
      if (window.Telegram && window.Telegram.WebApp) {
        const tg = window.Telegram.WebApp;
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram WebApp
        tg.ready();
        tg.expand();
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã –¥–ª—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
        if (tg.setBackgroundColor) {
          tg.setBackgroundColor('#1a1d24');
        }
        if (tg.setHeaderColor) {
          tg.setHeaderColor('#1a1d24');
        }
        
        // –í–∫–ª—é—á–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å —Ñ–æ–Ω–∞
        if (tg.enableClosingConfirmation) {
          tg.enableClosingConfirmation();
        }
        if (tg.disableVerticalSwipes) {
          tg.disableVerticalSwipes();
        }

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const initDataUnsafe = tg.initDataUnsafe;
        console.log('[APP] initDataUnsafe:', initDataUnsafe);
        
        if (initDataUnsafe && initDataUnsafe.user) {
          const user = initDataUnsafe.user;
          
          console.log('[APP] Telegram user:', user);
          
          // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è MVP
          console.log('[APP] Skipping auth for MVP');
          setTgUser(user);
          setCurrentView('home');
        } else {
          // –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º (–±–µ–∑ Telegram)
          console.log('[APP] Test mode - no Telegram data');
          setTgUser({ 
            id: 123456789, 
            first_name: 'Test User',
            username: 'testuser'
          });
          setCurrentView('home');
        }
      } else {
        // –í–µ–±-–≤–µ—Ä—Å–∏—è –±–µ–∑ Telegram
        console.log('[APP] Web mode - no Telegram WebApp');
        setTgUser({ 
          id: 987654321, 
          first_name: 'Web User',
          username: 'webuser'
        });
        setCurrentView('home');
      }
    } catch (error) {
      console.error('[APP] Initialization error:', error);
      setCurrentView('error');
    } finally {
      setLoading(false);
    }
  };

  const handleNavigation = (view, data = {}) => {
    setCurrentView(view);
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
    if (data) {
      console.log('[APP] Navigation data:', data);
    }
  };

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  const Navigation = () => (
    <div style={{
      position: 'fixed',
      bottom: 0,
      left: 0,
      right: 0,
      backgroundColor: '#fff',
      borderTop: '1px solid #dee2e6',
      display: 'flex',
      justifyContent: 'space-around',
      padding: '10px 0',
      zIndex: 1000
    }}>
      {[
        { key: 'home', icon: 'üè†', label: '–ì–ª–∞–≤–Ω–∞—è' },
        { key: 'events', icon: 'üéØ', label: '–°–æ–±—ã—Ç–∏—è' },
        { key: 'profile', icon: 'üë§', label: '–ü—Ä–æ—Ñ–∏–ª—å' }
      ].map(({ key, icon, label }) => (
        <button
          key={key}
          onClick={() => handleNavigation(key)}
          style={{
            background: 'none',
            border: 'none',
            padding: '8px',
            cursor: 'pointer',
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            color: currentView === key ? '#007bff' : '#6c757d',
            fontSize: '12px',
            transition: 'color 0.3s'
          }}
        >
          <div style={{ fontSize: '20px', marginBottom: '2px' }}>{icon}</div>
          <div>{label}</div>
        </button>
      ))}
    </div>
  );

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—à–∏–±–æ–∫
  if (loading) {
    return (
      <div style={{ 
        display: 'flex', 
        justifyContent: 'center', 
        alignItems: 'center', 
        height: '100vh',
        backgroundColor: '#0e0e0e'
      }}>
        <LoadingSpinner />
      </div>
    );
  }

  if (currentView === 'error') {
    return (
      <div style={{ 
        textAlign: 'center', 
        padding: '40px',
        color: '#dc3545'
      }}>
        <h2>‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏</h2>
        <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</p>
        <button 
          onClick={() => window.location.reload()}
          style={{
            padding: '10px 20px',
            backgroundColor: '#007bff',
            color: 'white',
            border: 'none',
            borderRadius: '5px',
            cursor: 'pointer'
          }}
        >
          üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å
        </button>
      </div>
    );
  }

  // –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å WebSocket –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º
  const API_URL = process.env.REACT_APP_API_URL || 'https://gift-zona-server.onrender.com';
  
  return (
    <WebSocketProvider apiUrl={API_URL}>
      <div style={{ 
        minHeight: '100vh',
        backgroundColor: 'transparent', // –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Telegram
        paddingBottom: '0'
      }}>
        {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
        {currentView === 'home' && (
          <MainPage 
            user={tgUser} 
            onNavigate={handleNavigation}
          />
        )}
        
        {currentView === 'events' && (
          <EventsPage 
            userId={tgUser?.id} 
            onNavigate={handleNavigation}
          />
        )}
        
        {currentView === 'profile' && (
          <ProfilePage 
            userId={tgUser?.id}
            user={tgUser}
          />
        )}

        {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è —É–±—Ä–∞–Ω–∞ - –≤—Å—Ç—Ä–æ–µ–Ω–∞ –≤ MainPage */}
      </div>
    </WebSocketProvider>
  );
}

export default App;
