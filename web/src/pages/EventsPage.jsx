import React, { useEffect, useState } from "react";
import LoadingSpinner from "../components/LoadingSpinner";
import apiService from "../services/api";

/**
 * –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –±–µ—Ç—Ç–∏–Ω–≥–∞
 * –ù–û–í–´–ô —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è –±–µ—Ç—Ç–∏–Ω–≥ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
 */
function EventsPage({ userId, onNavigate }) {
  const [events, setEvents] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    loadEvents();
  }, []);

  const loadEvents = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const response = await apiService.getActiveEvents();
      
      if (response.success) {
        setEvents(response.events);
      } else {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–±—ã—Ç–∏—è');
      }
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π:', error);
      setError(error.message);
    } finally {
      setLoading(false);
    }
  };

  const handleEventClick = (event) => {
    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—é —Å—Ç–∞–≤–∫–∏
    onNavigate('betting', { event });
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'waiting': return '#ffc107';
      case 'active': return '#28a745';
      case 'finished': return '#6c757d';
      default: return '#007bff';
    }
  };

  const getStatusText = (status) => {
    switch (status) {
      case 'waiting': return '‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ';
      case 'active': return 'üî• –ê–∫—Ç–∏–≤–Ω–æ';
      case 'finished': return '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ';
      default: return status;
    }
  };

  const formatTimeLeft = (endTime) => {
    const now = new Date();
    const end = new Date(endTime);
    const diff = end - now;
    
    if (diff <= 0) return '–ó–∞–≤–µ—Ä—à–µ–Ω–æ';
    
    const hours = Math.floor(diff / (1000 * 60 * 60));
    const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
    
    if (hours > 24) {
      const days = Math.floor(hours / 24);
      return `${days}–¥ ${hours % 24}—á`;
    }
    
    return hours > 0 ? `${hours}—á ${minutes}–º` : `${minutes}–º`;
  };

  if (loading) {
    return <LoadingSpinner />;
  }

  if (error) {
    return (
      <div style={{ 
        textAlign: 'center', 
        padding: '40px',
        color: '#dc3545'
      }}>
        <h2>‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h2>
        <p>{error}</p>
        <button 
          onClick={loadEvents}
          style={{
            padding: '10px 20px',
            backgroundColor: '#007bff',
            color: 'white',
            border: 'none',
            borderRadius: '5px',
            cursor: 'pointer'
          }}
        >
          üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å
        </button>
      </div>
    );
  }

  return (
    <div style={{ padding: '20px', maxWidth: '900px', margin: '0 auto' }}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div style={{ 
        textAlign: 'center', 
        marginBottom: '30px',
        padding: '20px',
        background: 'linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%)',
        borderRadius: '15px',
        color: 'white'
      }}>
        <h1>üéØ –°–æ–±—ã—Ç–∏—è –¥–ª—è —Å—Ç–∞–≤–æ–∫</h1>
        <p>–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –∏ —Å–¥–µ–ª–∞–π—Ç–µ —Å–≤–æ—é —Å—Ç–∞–≤–∫—É!</p>
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div style={{ 
        display: 'grid', 
        gridTemplateColumns: 'repeat(auto-fit, minmax(150px, 1fr))',
        gap: '15px',
        marginBottom: '30px'
      }}>
        <div style={{ 
          textAlign: 'center',
          padding: '15px',
          backgroundColor: '#f8f9fa',
          borderRadius: '10px'
        }}>
          <div style={{ fontSize: '24px', fontWeight: 'bold', color: '#007bff' }}>
            {events.length}
          </div>
          <div style={{ fontSize: '14px', color: '#666' }}>–í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π</div>
        </div>
        
        <div style={{ 
          textAlign: 'center',
          padding: '15px',
          backgroundColor: '#f8f9fa',
          borderRadius: '10px'
        }}>
          <div style={{ fontSize: '24px', fontWeight: 'bold', color: '#28a745' }}>
            {events.filter(e => e.status === 'active').length}
          </div>
          <div style={{ fontSize: '14px', color: '#666' }}>–ê–∫—Ç–∏–≤–Ω—ã—Ö</div>
        </div>
        
        <div style={{ 
          textAlign: 'center',
          padding: '15px',
          backgroundColor: '#f8f9fa',
          borderRadius: '10px'
        }}>
          <div style={{ fontSize: '24px', fontWeight: 'bold', color: '#ffc107' }}>
            {events.reduce((sum, e) => sum + e.total_bank, 0)}
          </div>
          <div style={{ fontSize: '14px', color: '#666' }}>–û–±—â–∏–π –±–∞–Ω–∫ ‚≠ê</div>
        </div>
      </div>

      {/* –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π */}
      <div style={{ display: 'grid', gap: '20px' }}>
        {events.length === 0 ? (
          <div style={{ 
            textAlign: 'center', 
            padding: '60px',
            backgroundColor: '#f8f9fa',
            borderRadius: '15px',
            color: '#6c757d'
          }}>
            <h3>üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π</h3>
            <p>–°–æ–±—ã—Ç–∏—è –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</p>
          </div>
        ) : (
          events.map((event) => (
            <div
              key={event.id}
              onClick={() => handleEventClick(event)}
              style={{
                padding: '20px',
                border: '2px solid #dee2e6',
                borderRadius: '15px',
                backgroundColor: 'white',
                cursor: 'pointer',
                transition: 'all 0.3s',
                boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
              }}
              onMouseEnter={(e) => {
                e.target.style.borderColor = '#007bff';
                e.target.style.transform = 'translateY(-2px)';
                e.target.style.boxShadow = '0 4px 8px rgba(0,0,0,0.15)';
              }}
              onMouseLeave={(e) => {
                e.target.style.borderColor = '#dee2e6';
                e.target.style.transform = 'translateY(0)';
                e.target.style.boxShadow = '0 2px 4px rgba(0,0,0,0.1)';
              }}
            >
              {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å—Ç–∞—Ç—É—Å */}
              <div style={{ 
                display: 'flex', 
                justifyContent: 'space-between', 
                alignItems: 'flex-start',
                marginBottom: '15px'
              }}>
                <div>
                  <h3 style={{ margin: '0 0 5px 0', color: '#333', fontSize: '20px' }}>
                    {event.title}
                  </h3>
                  {event.description && (
                    <p style={{ margin: '0', color: '#666', fontSize: '14px' }}>
                      {event.description}
                    </p>
                  )}
                </div>
                
                <div style={{
                  padding: '5px 12px',
                  backgroundColor: getStatusColor(event.status),
                  color: 'white',
                  borderRadius: '20px',
                  fontSize: '12px',
                  fontWeight: 'bold',
                  whiteSpace: 'nowrap'
                }}>
                  {getStatusText(event.status)}
                </div>
              </div>

              {/* –ò—Å—Ö–æ–¥—ã –∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã */}
              <div style={{ marginBottom: '15px' }}>
                <div style={{ 
                  display: 'grid',
                  gridTemplateColumns: `repeat(${event.outcomes.length}, 1fr)`,
                  gap: '10px'
                }}>
                  {event.outcomes.map((outcome, index) => (
                    <div
                      key={index}
                      style={{
                        padding: '10px',
                        backgroundColor: '#f8f9fa',
                        borderRadius: '8px',
                        textAlign: 'center',
                        border: '1px solid #dee2e6'
                      }}
                    >
                      <div style={{ fontWeight: 'bold', fontSize: '14px', marginBottom: '5px' }}>
                        {outcome}
                      </div>
                      <div style={{ 
                        color: '#007bff', 
                        fontSize: '16px', 
                        fontWeight: 'bold' 
                      }}>
                        {event.coefficients[index]}x
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–Ω–∫–µ –∏ –≤—Ä–µ–º–µ–Ω–∏ */}
              <div style={{ 
                display: 'flex', 
                justifyContent: 'space-between',
                alignItems: 'center',
                fontSize: '14px',
                color: '#666'
              }}>
                <div>
                  üí∞ –ë–∞–Ω–∫: <strong style={{ color: '#28a745' }}>{event.total_bank} ‚≠ê</strong>
                </div>
                <div>
                  ‚è∞ {formatTimeLeft(event.end_time)}
                </div>
              </div>
            </div>
          ))
        )}
      </div>

      {/* –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è */}
      <div style={{ textAlign: 'center', marginTop: '30px' }}>
        <button
          onClick={loadEvents}
          style={{
            padding: '12px 24px',
            backgroundColor: '#007bff',
            color: 'white',
            border: 'none',
            borderRadius: '8px',
            cursor: 'pointer',
            fontSize: '16px'
          }}
        >
          üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏—è
        </button>
      </div>
    </div>
  );
}

export default EventsPage;

