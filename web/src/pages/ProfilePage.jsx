import React, { useEffect, useState } from "react";
import LoadingSpinner from "../components/LoadingSpinner";
import apiService from "../services/api";

/**
 * –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ MyGifts.js - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞–º–∏, –±–∞–ª–∞–Ω—Å, –¥–µ–ø–æ–∑–∏—Ç—ã/–≤—ã–≤–æ–¥—ã
 */
function ProfilePage({ userId }) {
  const [gifts, setGifts] = useState([]);
  const [balance, setBalance] = useState(null);
  const [loading, setLoading] = useState(true);
  const [selectedGifts, setSelectedGifts] = useState({});
  const [withdrawing, setWithdrawing] = useState(false);
  const [withdrawalStatus, setWithdrawalStatus] = useState(null);

  useEffect(() => {
    if (userId) {
      loadUserData();
    }
  }, [userId]);

  const loadUserData = async () => {
    try {
      setLoading(true);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥–∞—Ä–∫–∏ –∏ –±–∞–ª–∞–Ω—Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      const [giftsData, balanceData] = await Promise.all([
        apiService.getUserDeposits(userId),
        apiService.getUserBalance(userId)
      ]);
      
      setGifts(giftsData);
      setBalance(balanceData.balance);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleGiftToggle = (giftId) => {
    setSelectedGifts(prev => ({
      ...prev,
      [giftId]: !prev[giftId]
    }));
  };

  const handleWithdraw = async () => {
    const selectedGiftIds = Object.keys(selectedGifts).filter(id => selectedGifts[id]);
    
    if (selectedGiftIds.length === 0) {
      alert('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∞—Ä–∫–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞');
      return;
    }

    const totalStars = selectedGiftIds.length * 25;
    const giftWord = selectedGiftIds.length === 1 ? '–ø–æ–¥–∞—Ä–æ–∫' : 
                    selectedGiftIds.length <= 4 ? '–ø–æ–¥–∞—Ä–∫–∞' : '–ø–æ–¥–∞—Ä–∫–æ–≤';

    if (!window.confirm(`–í—ã–≤–µ—Å—Ç–∏ ${selectedGiftIds.length} ${giftWord} –∑–∞ ${totalStars} –∑–≤–µ–∑–¥?`)) {
      return;
    }

    setWithdrawing(true);
    setWithdrawalStatus(`–°–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã ${totalStars} –∑–≤–µ–∑–¥...`);

    try {
      // –°–æ–∑–¥–∞–µ–º invoice –¥–ª—è –æ–ø–ª–∞—Ç—ã
      const invoiceData = await apiService.createPaymentInvoice(
        selectedGiftIds.map(id => parseInt(id)), 
        parseInt(userId)
      );

      if (invoiceData.success && invoiceData.invoice_url) {
        setWithdrawalStatus('–û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –æ–ø–ª–∞—Ç—ã...');
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º Telegram invoice
        if (window.Telegram?.WebApp?.openInvoice) {
          window.Telegram.WebApp.openInvoice(invoiceData.invoice_url, (status) => {
            if (status === 'paid') {
              setWithdrawalStatus('–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–≤–æ–¥...');
              // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥
              setTimeout(() => {
                loadUserData();
                setSelectedGifts({});
                setWithdrawalStatus(null);
                setWithdrawing(false);
              }, 3000);
            } else {
              setWithdrawalStatus('–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞');
              setWithdrawing(false);
            }
          });
        } else {
          // Fallback - –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤ –±—Ä–∞—É–∑–µ—Ä–µ
          window.open(invoiceData.invoice_url, '_blank');
          setWithdrawalStatus('–ó–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É –≤ –æ—Ç–∫—Ä—ã–≤—à–µ–º—Å—è –æ–∫–Ω–µ');
          setWithdrawing(false);
        }
      } else {
        throw new Error(invoiceData.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã');
      }

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞:', error);
      setWithdrawalStatus(`–û—à–∏–±–∫–∞: ${error.message}`);
      setWithdrawing(false);
    }
  };

  const selectedCount = Object.values(selectedGifts).filter(Boolean).length;
  const isWithdrawButtonActive = selectedCount > 0 && !withdrawing;

  if (loading) {
    return <LoadingSpinner />;
  }

  return (
    <div style={{ padding: '20px', maxWidth: '800px', margin: '0 auto' }}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ—Ñ–∏–ª—è */}
      <div style={{ 
        textAlign: 'center', 
        marginBottom: '30px',
        padding: '20px',
        background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
        borderRadius: '15px',
        color: 'white'
      }}>
        <h1>üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å</h1>
        {balance && (
          <div style={{ marginTop: '15px', fontSize: '18px' }}>
            <div>üí∞ –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: <strong>{balance.available_balance} ‚≠ê</strong></div>
            <div style={{ fontSize: '14px', opacity: '0.9', marginTop: '5px' }}>
              –î–µ–ø–æ–∑–∏—Ç–æ–≤: {balance.total_deposited} ‚≠ê | 
              –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {balance.total_spent} ‚≠ê | 
              –í—ã–∏–≥—Ä–∞–Ω–æ: {balance.total_won} ‚≠ê
            </div>
          </div>
        )}
      </div>

      {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞–º–∏ */}
      <div style={{ marginBottom: '20px' }}>
        <h2>üéÅ –ú–æ–∏ –ø–æ–¥–∞—Ä–∫–∏ ({gifts.length})</h2>
        
        {/* –ö–Ω–æ–ø–∫–∞ –≤—ã–≤–æ–¥–∞ */}
        {gifts.length > 0 && (
          <div style={{ marginBottom: '20px', textAlign: 'center' }}>
            <button
              onClick={handleWithdraw}
              disabled={!isWithdrawButtonActive}
              style={{
                padding: '12px 24px',
                fontSize: '16px',
                backgroundColor: isWithdrawButtonActive ? '#28a745' : '#6c757d',
                color: 'white',
                border: 'none',
                borderRadius: '8px',
                cursor: isWithdrawButtonActive ? 'pointer' : 'not-allowed',
                transition: 'all 0.3s'
              }}
            >
              {withdrawing ? '‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞...' : `üí∏ –í—ã–≤–µ—Å—Ç–∏ (${selectedCount})`}
            </button>
            
            {withdrawalStatus && (
              <div style={{ 
                marginTop: '10px', 
                padding: '10px',
                backgroundColor: '#f8f9fa',
                borderRadius: '5px',
                color: '#495057'
              }}>
                {withdrawalStatus}
              </div>
            )}
          </div>
        )}
      </div>

      {/* –°–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤ */}
      <div style={{ display: 'grid', gap: '15px' }}>
        {gifts.length === 0 ? (
          <div style={{ 
            textAlign: 'center', 
            padding: '40px',
            backgroundColor: '#f8f9fa',
            borderRadius: '10px',
            color: '#6c757d'
          }}>
            <h3>üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–∞—Ä–∫–æ–≤</h3>
            <p>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–¥–∞—Ä–∫–∏ –±–æ—Ç—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞</p>
          </div>
        ) : (
          gifts.map((gift) => (
            <div
              key={gift.id}
              style={{
                padding: '15px',
                border: '2px solid',
                borderColor: selectedGifts[gift.id] ? '#007bff' : '#dee2e6',
                borderRadius: '10px',
                backgroundColor: selectedGifts[gift.id] ? '#e3f2fd' : 'white',
                cursor: 'pointer',
                transition: 'all 0.3s'
              }}
              onClick={() => handleGiftToggle(gift.id)}
            >
              <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                <div>
                  <h4 style={{ margin: '0 0 5px 0', color: '#333' }}>
                    üéÅ {gift.title}
                  </h4>
                  <div style={{ fontSize: '14px', color: '#666' }}>
                    –°—Ç–æ–∏–º–æ—Å—Ç—å: <strong>{gift.num} ‚≠ê</strong>
                  </div>
                  <div style={{ fontSize: '12px', color: '#999' }}>
                    {new Date(gift.created_at).toLocaleDateString('ru-RU')}
                  </div>
                </div>
                
                <div style={{
                  width: '24px',
                  height: '24px',
                  borderRadius: '50%',
                  border: '2px solid #007bff',
                  backgroundColor: selectedGifts[gift.id] ? '#007bff' : 'transparent',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  color: 'white',
                  fontSize: '14px'
                }}>
                  {selectedGifts[gift.id] ? '‚úì' : ''}
                </div>
              </div>
            </div>
          ))
        )}
      </div>

      {/* –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ */}
      <div style={{ 
        marginTop: '30px',
        padding: '20px',
        backgroundColor: '#f8f9fa',
        borderRadius: '10px',
        textAlign: 'center'
      }}>
        <h3>üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞</h3>
        <div style={{ 
          padding: '10px',
          backgroundColor: 'white',
          borderRadius: '5px',
          fontFamily: 'monospace',
          fontSize: '14px',
          wordBreak: 'break-all',
          color: '#007bff'
        }}>
          https://t.me/gift_zona_bot?start={userId}
        </div>
        <button
          onClick={() => {
            navigator.clipboard.writeText(`https://t.me/gift_zona_bot?start=${userId}`);
            alert('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!');
          }}
          style={{
            marginTop: '10px',
            padding: '8px 16px',
            backgroundColor: '#007bff',
            color: 'white',
            border: 'none',
            borderRadius: '5px',
            cursor: 'pointer'
          }}
        >
          üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
        </button>
      </div>
    </div>
  );
}

export default ProfilePage;

